;CheatSheet ò Chuleta de Funciones para el Tercer parcial.
;Convencion.
;car:caracter.
;cad:cadena.
;pos:posicion 
;lst: lista
;vec:vector

;Funciones Primales Cadenas:
(char? caracter)             -->Devuelve #t o #f si es caracter o no! 
(char=? car1 car2) -->Devuelve #t o #f si ambos caracteres son iguales.
(char<? car1 car2) -->Devuelve #t o #f si caracter1 esta antes que caracter2 en alfabeto
(char>? car1 car2) -->Devuelve #t o #f si caracter1 esta despues de caracter2 en alfabeto
(char<=? car1 car2)-->Devuelve #t o #f si caracter1 esta antes que caract2 o son los mismos.
(char>=? car1 car2)-->Devuelve #t o #f si ambos caracteres son iguales.

;Determinar si el caracter evaluado es numerico, alfabetico, especial, mayuscula, minuscula.
(char-alphabetic? car)      -->Devuelve #t o #f si el caracter es alphabetico.
(char-numeric? car)         -->Devuelve #t o #f si el caracter es numerico.

;Determinar si es mayuscula o minuscula.
(char-whitespace? car)      -->Es en blanco.
(char-upper-case? car)      -->Es mayuscula el caracter?
(char-lower-case? car)      -->Es minuscula el caracter?
(char-upcase car)           -->Retorna la mayuscula de car.
(char-downcase car)         -->Retorna la minuscula de car.

Hay tres funciones básicas para la creación y manipulación de cadenas:
(string cad) 		-->	forma una nueva cadena a partir de una serie de caracteres;
(string-ref cad pos)--> devuelve un caracter de una cadena, dada su posición; 
(string-length) 	--> devuelve su longitud medida en caracteres

Cadenas Mutables:
(make-string str ) 			--> recibe una longitud para la nueva cadena mutable y opcionalmente ;uncaracter de relleno, por defecto el caracter nulo ( \u0000 ).
(string-set! cad pos)		-->modifica un caracter de una cadena mutable, dada su posición.
(string->immutable-string)  --> convierte una cadena mutable en su versión inmutable
(immutable?)				--> verifica si un objeto es inmutable.
(string-copy! cad1 cad2 ) 	--> copia total o parcialmente el contenido de una cadena mutable 								  o inmutable a otra cadena mutable.
(string        #\a #\b)      -->"ab"
(random #)                   -->debuelve numero aleatoreo
(define c (make-string 4 c)) -->hace cadena con c
(string-ref   string #)      -->extrae cararter
(string-set! cadena # char)  -->pone un cararter
(string-length string)       -->cuenta la cantidad de caracteres
(substring string #1 #!2)    -->extrae una seccion
(string-append "" "")        -->una cadenas


;Funciones Primales Sobre listas.


(reverse (list 1 5 2)) --> invierte una lista
(append list1 list2)   --> unir listas           
(length list)          --> elementos en una lista
(member 6 lista2)      --> (lista2 8 9 10)=#f
(add1 (list  1 3))     --> '(2  4)
(map func lista)       --> applica una operacion como suma de listas
(empty? lista)         --> si estaba vacia = #t
(apply + ‘(10 20))     --> = 30
60 
(filter función lista)

(and #t #t #f)   -->#f
(or  #t #t #f)   -->#t

remainder     --> residuo de división
quotient      --> parte entera, cociente

(read)
(read-char)
(read-line)
(read-string #)
;Funciones de Vectores 

Algunas funciones básicas para manipular vectores son:
(vector  vec)		--> construye un nuevo vector mutable conteniendo los parámetros de la 
(vector? vec)       --> verica si su parámetro es un vector.
(vector-ref vec pos)--> devuelve un elemento de un vector en función de su posición.
(list->vector lst)	--> convierte una lista en un vector con los mismos elementos.
(vector->list vec) 	-->convierte un vector en su representación de lista.
(vector-set! vec pos v)-->modica un valor de un vector mutable dada su posición.
(vector-lenght vector) -->Muestra el tamño del vector.
(make-vector vec)   -->crea un vector mutable de un tamaño especicado y opcionalmente un
					 valor de relleno.
(vector-immutable vec)-->igual que vector pero devuelve un vector inmutable.
(vector->immutable-vector vec)-->devuelve un vector inmutable dado otro vector
(vector-copy! vec vec2)-->copia total o parcialmente el contenido de un vector (mutable o in-
					mutable) a un vector mutable.